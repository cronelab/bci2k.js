(function(d,g){typeof exports=="object"&&typeof module<"u"?g(exports,require("websocket")):typeof define=="function"&&define.amd?define(["exports","websocket"],g):(d=typeof globalThis<"u"?globalThis:d||self,g(d.bci2k={},d.websocket))})(this,function(d,g){"use strict";const S=g.w3cwebsocket;class x{constructor(i){this.ondisconnect=()=>{},this.onStateChange=s=>{},this.websocket=null,this.state="",this.address=i||void 0,this.latestIncomingData="",this.msgID=0,this.newData=()=>{},this.responseBuffer=[]}connect(i){return new Promise((s,t)=>{this.address===void 0&&(this.address=i||"ws://127.0.0.1:80"),this.websocket=new S(this.address),this.websocket.onerror=a=>t(`Error connecting to BCI2000 at ${this.address}`),this.websocket.onclose=()=>{console.log("Connection closed"),this.ondisconnect()},this.websocket.onopen=()=>s(),this.websocket.onmessage=a=>{let{opcode:e,id:n,contents:r}=JSON.parse(a.data);switch(e){case"O":this.responseBuffer.push({id:n,response:r}),this.newData(r);break}}})}disconnect(){this.websocket.close()}connected(){return this.websocket!==null&&this.websocket.readyState===S.OPEN}execute(i){return this.connected()?new Promise((s,t)=>{this.msgID=this.msgID+1,this.websocket.send(JSON.stringify({opcode:"E",id:this.msgID,contents:i})),this.newData=a=>s(a)}):Promise.reject("Cannot execute instruction: not connected to BCI2000")}async getVersion(){return(await this.execute("Version")).split("\r")[0]}async showWindow(){await this.execute("Show Window")}async hideWindow(){await this.execute("Hide Window")}async startExecutable(i){await this.execute(`Start executable ${i}`)}async startDummyRun(){await this.startExecutable("SignalGenerator"),await this.startExecutable("DummySignalProcessing"),await this.startExecutable("DummyApplication")}async setWatch(i,s,t){await this.execute("Add watch "+i+" at "+s+":"+t)}async resetSystem(){await this.execute("Reset System")}async setConfig(){await this.execute("Set Config")}async start(){await this.execute("Start")}async stop(){await this.execute("Stop")}async kill(){await this.execute("Exit")}stateListen(){setInterval(async()=>{let i=await this.execute("GET SYSTEM STATE");i.trim()!=this.state&&this.onStateChange(i.trim())},1e3)}async getSubjectName(){return await this.execute("Get Parameter SubjectName")}async getTaskName(){return await this.execute("Get Parameter DataFile")}async setParameter(i){await this.execute(`Set paramater ${i}`)}async setState(i){await this.execute(`Set state ${i}`)}async getParameters(){let s=(await this.execute("List Parameters")).split(`
`),t={},a;return s.forEach(e=>{let n=e.split("=")[0],r=n.split(" ")[1],l=n.split(" ")[2],o=n.split(" ")[0].split(":");o.forEach((m,h)=>{switch(h){case 0:{t[o[0]]==null&&(t[o[0]]={}),a=t[o[0]];break}case 1:{t[o[0]][o[1]]==null&&(t[o[0]][o[1]]={}),a=t[o[0]][o[1]];break}case 2:{t[o[0]][o[1]][o[2]]==null&&(t[o[0]][o[1]][o[2]]={}),a=t[o[0]][o[1]][o[2]];break}}}),r!="matrix"?e.split("=")[1].split("//")[0].trim().split(" ").length==4?a[l]={dataType:r,value:{value:e.split("=")[1].split("//")[0].trim().split(" ")[0],defaultValue:e.split("=")[1].split("//")[0].trim().split(" ")[1],low:e.split("=")[1].split("//")[0].trim().split(" ")[2],high:e.split("=")[1].split("//")[0].trim().split(" ")[3]},comment:e.split("=")[1].split("//")[1]}:a[l]={dataType:r,value:e.split("=")[1].split("//")[0].trim(),comment:e.split("=")[1].split("//")[1]}:a[l]={dataType:r,value:e.split("=")[1].split("//")[0].trim(),comment:e.split("=")[1].split("//")[1]}}),t}}const k=g.w3cwebsocket;class P{constructor(i){this._socket=null,this.onconnect=()=>{},this.onGenericSignal=s=>{},this.onStateVector=s=>{},this.onSignalProperties=s=>{},this.onStateFormat=s=>{},this.ondisconnect=()=>{},this.onReceiveBlock=()=>{},this.callingFrom="",this.states={},this.signal=null,this.signalProperties=null,this.stateFormat=null,this.stateVecOrder=null,this.SignalType={INT16:0,FLOAT24:1,FLOAT32:2,INT32:3},this.address=i}getNullTermString(i){var s="";let t=0;for(;t<i.byteLength;){var a=i.getUint8(t);if(t++,a==0)break;s+=String.fromCharCode(a)}return s}connect(i,s){let t=this;return t.address===void 0&&(t.address=i),this.callingFrom=s,new Promise((a,e)=>{t._socket=new k(t.address),t._socket.binaryType="arraybuffer",t._socket.onerror=()=>{e("Error connecting to data source at "+t.address)},t._socket.onopen=()=>{t.onconnect(),a()},t._socket.onclose=()=>{t.ondisconnect(),setTimeout(()=>{console.log("Disconnected"),this.connect("")},1e3)},t._socket.onmessage=n=>{t._decodeMessage(n.data)}})}connected(){return this._socket!=null&&this._socket.readyState===k.OPEN}_decodeMessage(i){let s=new DataView(i,0,1).getUint8(0);switch(s){case 3:let t=new DataView(i,1,i.byteLength-1);this._decodeStateFormat(t);break;case 4:let a=new DataView(i,1,2).getUint8(0);switch(a){case 1:let n=new DataView(i,2,i.byteLength-2);this._decodeGenericSignal(n);break;case 3:let r=new DataView(i,2,i.byteLength-2);this._decodeSignalProperties(r);break;default:console.error("Unsupported Supplement: "+a.toString());break}this.onReceiveBlock();break;case 5:let e=new DataView(i,1,i.byteLength-1);this._decodeStateVector(e);break;default:console.error("Unsupported Descriptor: "+s.toString());break}}_decodePhysicalUnits(i){let s;s={};let t=i.split(" "),a=0;return s.offset=Number(t[a++]),s.gain=Number(t[a++]),s.symbol=t[a++],s.vmin=Number(t[a++]),s.vmax=Number(t[a++]),s}_decodeSignalProperties(i){let s=this.getNullTermString(i);s=s.replace(/{/g," { "),s=s.replace(/}/g," } "),this.signalProperties={};let t=s.split(" "),a=[];for(let n=0;n<t.length;n++)t[n].trim()!==""&&a.push(t[n]);let e=0;if(this.signalProperties.name=a[e++],this.signalProperties.channels=[],a[e]==="{"){for(;a[++e]!=="}";)this.signalProperties.channels.push(a[e]);e++}else{let n=parseInt(a[e++]);for(let r=0;r<n;r++)this.signalProperties.channels.push((r+1).toString())}if(this.signalProperties.elements=[],a[e]==="{"){for(;a[++e]!=="}";)this.signalProperties.elements.push(a[e]);e++}else{let n=parseInt(a[e++]);for(let r=0;r<n;r++)this.signalProperties.elements.push((r+1).toString())}this.signalProperties.numelements=this.signalProperties.elements.length,this.signalProperties.signaltype=a[e++],this.signalProperties.channelunit=this._decodePhysicalUnits(a.slice(e,e+=5).join(" ")),this.signalProperties.elementunit=this._decodePhysicalUnits(a.slice(e,e+=5).join(" ")),e++,this.signalProperties.valueunits=[];for(let n=0;n<this.signalProperties.channels.length;n++)this.signalProperties.valueunits.push(this._decodePhysicalUnits(a.slice(e,e+=5).join(" ")));e++,this.onSignalProperties(this.signalProperties)}_decodeStateFormat(i){this.stateFormat={};let t=this.getNullTermString(i).split(`
`);for(let e=0;e<t.length;e++){if(t[e].trim().length===0)continue;let n=t[e].split(" "),r=n[0];this.stateFormat[r]={},this.stateFormat[r].bitWidth=parseInt(n[1]),this.stateFormat[r].defaultValue=parseInt(n[2]),this.stateFormat[r].byteLocation=parseInt(n[3]),this.stateFormat[r].bitLocation=parseInt(n[4])}let a=[];for(let e in this.stateFormat){let n=this.stateFormat[e].byteLocation*8;n+=this.stateFormat[e].bitLocation,a.push([e,n])}a.sort((e,n)=>e[1]<n[1]?-1:e[1]>n[1]?1:0),this.stateVecOrder=[];for(let e=0;e<a.length;e++){let n=a[e][0];this.stateVecOrder.push([n,this.stateFormat[n].bitWidth])}this.onStateFormat(this.stateFormat)}_decodeGenericSignal(i){let s=0,t=i.getUint8(s);s=s+1;let a=i.getUint16(s,!0);s=s+2;let e=i.getUint16(s,!0);s=s+2,s=s+i.byteOffset;let n=new DataView(i.buffer,s),r=[];for(let l=0;l<a;++l){r.push([]);for(let o=0;o<e;++o)switch(t){case this.SignalType.INT16:r[l].push(n.getInt16((e*l+o)*2,!0));break;case this.SignalType.FLOAT32:r[l].push(n.getFloat32((e*l+o)*4,!0));break;case this.SignalType.INT32:r[l].push(n.getInt32((e*l+o)*4,!0));break;case this.SignalType.FLOAT24:r[l].push(0);break}}this.signal=r,this.onGenericSignal(r)}_decodeStateVector(i){if(this.stateVecOrder==null)return;let s=new Int8Array(i.buffer),t=s.indexOf(0),a=s.indexOf(0,t+1),e=new TextDecoder,n=parseInt(e.decode(s.slice(1,t))),r=parseInt(e.decode(s.slice(t+1,a))),l=a+1,o=new DataView(i.buffer,l),m={};for(let h in this.stateFormat)m[h]=Array(r).fill(this.stateFormat[h].defaultValue);for(let h=0;h<r;h++){let p=new Uint8Array(o.buffer,o.byteOffset+h*n,n),u=[];for(let c=0;c<p.length;c++)u.push(p[c]&1?1:0),u.push(p[c]&2?1:0),u.push(p[c]&4?1:0),u.push(p[c]&8?1:0),u.push(p[c]&16?1:0),u.push(p[c]&32?1:0),u.push(p[c]&64?1:0),u.push(p[c]&128?1:0);for(let c=0;c<this.stateVecOrder.length;c++){let w=this.stateFormat[this.stateVecOrder[c][0]],V=w.byteLocation*8+w.bitLocation,f=0,b=1;for(let y=0;y<w.bitWidth;y++)u[V+y]&&(f=(f|b)>>>0),b=b<<1>>>0;m[this.stateVecOrder[c][0]][h]=f}}this.onStateVector(m),this.states=m}}d.BCI2K_DataConnection=P,d.BCI2K_OperatorConnection=x,Object.defineProperty(d,Symbol.toStringTag,{value:"Module"})});
